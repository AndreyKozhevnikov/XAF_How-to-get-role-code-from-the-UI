Imports System.Linq
Imports System.Text
Imports System.Collections.Generic
Imports System.Configuration
Imports RoleGeneratorSpace
Imports System

'------------------------------------------------------------------------------
'<auto-generated>
'    This code was generated by a tool.
'    Runtime Version: 16.0.0.0
' 
'    Changes to this file may cause incorrect behavior and will be lost if
'    the code is regenerated.
'</auto-generated>
'------------------------------------------------------------------------------
'''<summary>
'''Class to produce the template output
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")>  _
Partial Public Class UpdaterRuntimeTemplate
    Inherits UpdaterRuntimeTemplateBase
    '''<summary>
    '''Create the template output
    '''</summary>
    Public Overridable Function TransformText() As String
        Me.Write("Imports System"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Collections.Generic"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Linq"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports "& _ 
                "System.Text"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Threading.Tasks"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports DevExpress.Data.Filtering"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "Imports DevExpress.ExpressApp"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports DevExpress.ExpressApp.Updating"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports D"& _ 
                "evExpress.Persistent.Base"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",20)

For Each [nameSpace] As String In NameSpacesCodeLines
        
        #End ExternalSource
        Me.Write("Imports ")
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",22)
        Me.Write(Me.ToStringHelper.ToStringWithCulture([nameSpace]))
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",23)
 Next 
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Namespace YourNameSpace"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Public Class RoleUpdater"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Inherits ModuleUpdater"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Public Sub New(ByVal objectSpace As IObjectSpace, ByVal currentDBVersion As V"& _ 
                "ersion)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            MyBase.New(objectSpace, currentDBVersion)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Public Overrides Sub UpdateDatabaseAfterUpdateSchema()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MyBase.UpdateDatab"& _ 
                "aseAfterUpdateSchema()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",34)

For Each method In CodeLines
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Create")
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",36)
        Me.Write(Me.ToStringHelper.ToStringWithCulture(method.Key))
        
        #End ExternalSource
        Me.Write("Role()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",37)
 Next 
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ObjectSpace.CommitChanges()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",40)

For Each method In CodeLines
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Private Sub Create")
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",42)
        Me.Write(Me.ToStringHelper.ToStringWithCulture(method.Key))
        
        #End ExternalSource
        Me.Write("Role()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Dim role As ")
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",43)
        Me.Write(Me.ToStringHelper.ToStringWithCulture(RoleTypeName))
        
        #End ExternalSource
        Me.Write(" = ObjectSpace.FindObject(Of ")
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",43)
        Me.Write(Me.ToStringHelper.ToStringWithCulture(RoleTypeName))
        
        #End ExternalSource
        Me.Write(")(new BinaryOperator(""Name"", """)
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",43)
        Me.Write(Me.ToStringHelper.ToStringWithCulture(method.Key))
        
        #End ExternalSource
        Me.Write("""))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"If role Is Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"role = ObjectSpace.CreateObject(Of ")
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",45)
        Me.Write(Me.ToStringHelper.ToStringWithCulture(RoleTypeName))
        
        #End ExternalSource
        Me.Write(")()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",46)

	For Each codeLine As String In method.Value
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",48)
        Me.Write(Me.ToStringHelper.ToStringWithCulture(codeLine))
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",49)
 Next 
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        
        #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",52)
 Next 
        
        #End ExternalSource
        Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&"End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Namespace"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
        Return Me.GenerationEnvironment.ToString
    End Function
    
    #ExternalSource("E:\Projects\VB\RoleGenerator\UpdaterRuntimeTemplate.tt",1)

Private _NameSpacesCodeLinesField As Global.System.Collections.Generic.HashSet( Of System.String)

'''<summary>
'''Access the NameSpacesCodeLines parameter of the template.
'''</summary>
Private ReadOnly Property NameSpacesCodeLines() As Global.System.Collections.Generic.HashSet( Of System.String)
    Get
        Return Me._NameSpacesCodeLinesField
    End Get
End Property

Private _CodeLinesField As Global.System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List( Of System.String))

'''<summary>
'''Access the CodeLines parameter of the template.
'''</summary>
Private ReadOnly Property CodeLines() As Global.System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List( Of System.String))
    Get
        Return Me._CodeLinesField
    End Get
End Property

Private _RoleTypeNameField As String

'''<summary>
'''Access the RoleTypeName parameter of the template.
'''</summary>
Private ReadOnly Property RoleTypeName() As String
    Get
        Return Me._RoleTypeNameField
    End Get
End Property


'''<summary>
'''Initialize the template
'''</summary>
Public Overridable Sub Initialize()
    If (Me.Errors.HasErrors = false) Then
Dim NameSpacesCodeLinesValueAcquired As Boolean = false
If Me.Session.ContainsKey("NameSpacesCodeLines") Then
    Me._NameSpacesCodeLinesField = CType(Me.Session("NameSpacesCodeLines"),Global.System.Collections.Generic.HashSet( Of System.String))
    NameSpacesCodeLinesValueAcquired = true
End If
If (NameSpacesCodeLinesValueAcquired = false) Then
    Dim data As Object = Global.System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NameSpacesCodeLines")
    If (Not (data) Is Nothing) Then
        Me._NameSpacesCodeLinesField = CType(data,Global.System.Collections.Generic.HashSet( Of System.String))
    End If
End If
Dim CodeLinesValueAcquired As Boolean = false
If Me.Session.ContainsKey("CodeLines") Then
    Me._CodeLinesField = CType(Me.Session("CodeLines"),Global.System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List( Of System.String)))
    CodeLinesValueAcquired = true
End If
If (CodeLinesValueAcquired = false) Then
    Dim data As Object = Global.System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("CodeLines")
    If (Not (data) Is Nothing) Then
        Me._CodeLinesField = CType(data,Global.System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List( Of System.String)))
    End If
End If
Dim RoleTypeNameValueAcquired As Boolean = false
If Me.Session.ContainsKey("RoleTypeName") Then
    Me._RoleTypeNameField = CType(Me.Session("RoleTypeName"),String)
    RoleTypeNameValueAcquired = true
End If
If (RoleTypeNameValueAcquired = false) Then
    Dim data As Object = Global.System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RoleTypeName")
    If (Not (data) Is Nothing) Then
        Me._RoleTypeNameField = CType(data,String)
    End If
End If


    End If
End Sub


    
    #End ExternalSource
End Class
#Region "Base class"
'''<summary>
'''Base class for this transformation
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")>  _
Public Class UpdaterRuntimeTemplateBase
    #Region "Fields"
    Private generationEnvironmentField As Global.System.Text.StringBuilder
    Private errorsField As Global.System.CodeDom.Compiler.CompilerErrorCollection
    Private indentLengthsField As Global.System.Collections.Generic.List(Of Integer)
    Private currentIndentField As String = ""
    Private endsWithNewline As Boolean
    Private sessionField As Global.System.Collections.Generic.IDictionary(Of String, Object)
    #End Region
    #Region "Properties"
    '''<summary>
    '''The string builder that generation-time code is using to assemble generated output
    '''</summary>
    Protected Property GenerationEnvironment() As System.Text.StringBuilder
        Get
            If (Me.generationEnvironmentField Is Nothing) Then
                Me.generationEnvironmentField = New Global.System.Text.StringBuilder()
            End If
            Return Me.generationEnvironmentField
        End Get
        Set
            Me.generationEnvironmentField = value
        End Set
    End Property
    '''<summary>
    '''The error collection for the generation process
    '''</summary>
    Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
        Get
            If (Me.errorsField Is Nothing) Then
                Me.errorsField = New Global.System.CodeDom.Compiler.CompilerErrorCollection()
            End If
            Return Me.errorsField
        End Get
    End Property
    '''<summary>
    '''A list of the lengths of each indent that was added with PushIndent
    '''</summary>
    Private ReadOnly Property indentLengths() As System.Collections.Generic.List(Of Integer)
        Get
            If (Me.indentLengthsField Is Nothing) Then
                Me.indentLengthsField = New Global.System.Collections.Generic.List(Of Integer)()
            End If
            Return Me.indentLengthsField
        End Get
    End Property
    '''<summary>
    '''Gets the current indent we use when adding lines to the output
    '''</summary>
    Public ReadOnly Property CurrentIndent() As String
        Get
            Return Me.currentIndentField
        End Get
    End Property
    '''<summary>
    '''Current transformation session
    '''</summary>
    Public Overridable Property Session() As Global.System.Collections.Generic.IDictionary(Of String, Object)
        Get
            Return Me.sessionField
        End Get
        Set
            Me.sessionField = value
        End Set
    End Property
    #End Region
    #Region "Transform-time helpers"
    '''<summary>
    '''Write text directly into the generated output
    '''</summary>
    Public Overloads Sub Write(ByVal textToAppend As String)
        If String.IsNullOrEmpty(textToAppend) Then
            Return
        End If
        'If we're starting off, or if the previous text ended with a newline,
        'we have to append the current indent first.
        If ((Me.GenerationEnvironment.Length = 0)  _
                    OrElse Me.endsWithNewline) Then
            Me.GenerationEnvironment.Append(Me.currentIndentField)
            Me.endsWithNewline = false
        End If
        'Check if the current text ends with a newline
        If textToAppend.EndsWith(Global.System.Environment.NewLine, Global.System.StringComparison.CurrentCulture) Then
            Me.endsWithNewline = true
        End If
        'This is an optimization. If the current indent is "", then we don't have to do any
        'of the more complex stuff further down.
        If (Me.currentIndentField.Length = 0) Then
            Me.GenerationEnvironment.Append(textToAppend)
            Return
        End If
        'Everywhere there is a newline in the text, add an indent after it
        textToAppend = textToAppend.Replace(Global.System.Environment.NewLine, (Global.System.Environment.NewLine + Me.currentIndentField))
        'If the text ends with a newline, then we should strip off the indent added at the very end
        'because the appropriate indent will be added when the next time Write() is called
        If Me.endsWithNewline Then
            Me.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - Me.currentIndentField.Length))
        Else
            Me.GenerationEnvironment.Append(textToAppend)
        End If
    End Sub
    '''<summary>
    '''Write text directly into the generated output
    '''</summary>
    Public Overloads Sub WriteLine(ByVal textToAppend As String)
        Me.Write(textToAppend)
        Me.GenerationEnvironment.AppendLine
        Me.endsWithNewline = true
    End Sub
    '''<summary>
    '''Write formatted text directly into the generated output
    '''</summary>
    Public Overloads Sub Write(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
        Me.Write(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
    End Sub
    '''<summary>
    '''Write formatted text directly into the generated output
    '''</summary>
    Public Overloads Sub WriteLine(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
        Me.WriteLine(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
    End Sub
    '''<summary>
    '''Raise an error
    '''</summary>
    Public Sub [Error](ByVal message As String)
        Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
        [error].ErrorText = message
        Me.Errors.Add([error])
    End Sub
    '''<summary>
    '''Raise a warning
    '''</summary>
    Public Sub Warning(ByVal message As String)
        Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
        [error].ErrorText = message
        [error].IsWarning = true
        Me.Errors.Add([error])
    End Sub
    '''<summary>
    '''Increase the indent
    '''</summary>
    Public Sub PushIndent(ByVal indent As String)
        If (indent = Nothing) Then
            Throw New Global.System.ArgumentNullException("indent")
        End If
        Me.currentIndentField = (Me.currentIndentField + indent)
        Me.indentLengths.Add(indent.Length)
    End Sub
    '''<summary>
    '''Remove the last indent that was added with PushIndent
    '''</summary>
    Public Function PopIndent() As String
        Dim returnValue As String = ""
        If (Me.indentLengths.Count > 0) Then
            Dim indentLength As Integer = Me.indentLengths((Me.indentLengths.Count - 1))
            Me.indentLengths.RemoveAt((Me.indentLengths.Count - 1))
            If (indentLength > 0) Then
                returnValue = Me.currentIndentField.Substring((Me.currentIndentField.Length - indentLength))
                Me.currentIndentField = Me.currentIndentField.Remove((Me.currentIndentField.Length - indentLength))
            End If
        End If
        Return returnValue
    End Function
    '''<summary>
    '''Remove any indentation
    '''</summary>
    Public Sub ClearIndent()
        Me.indentLengths.Clear
        Me.currentIndentField = ""
    End Sub
    #End Region
    #Region "ToString Helpers"
    '''<summary>
    '''Utility class to produce culture-oriented representation of an object as a string.
    '''</summary>
    Public Class ToStringInstanceHelper
        Private formatProviderField  As System.IFormatProvider = Global.System.Globalization.CultureInfo.InvariantCulture
        '''<summary>
        '''Gets or sets format provider to be used by ToStringWithCulture method.
        '''</summary>
        Public Property FormatProvider() As System.IFormatProvider
            Get
                Return Me.formatProviderField 
            End Get
            Set
                If (Not (value) Is Nothing) Then
                    Me.formatProviderField  = value
                End If
            End Set
        End Property
        '''<summary>
        '''This is called from the compile/run appdomain to convert objects within an expression block to a string
        '''</summary>
        Public Function ToStringWithCulture(ByVal objectToConvert As Object) As String
            If (objectToConvert Is Nothing) Then
                Throw New Global.System.ArgumentNullException("objectToConvert")
            End If
            Dim t As System.Type = objectToConvert.GetType
            Dim method As System.Reflection.MethodInfo = t.GetMethod("ToString", New System.Type() {GetType(System.IFormatProvider)})
            If (method Is Nothing) Then
                Return objectToConvert.ToString
            Else
                Return CType(method.Invoke(objectToConvert, New Object() {Me.formatProviderField }),String)
            End If
        End Function
    End Class
    Private toStringHelperField As ToStringInstanceHelper = New ToStringInstanceHelper()
    '''<summary>
    '''Helper to produce culture-oriented representation of an object as a string
    '''</summary>
    Public ReadOnly Property ToStringHelper() As ToStringInstanceHelper
        Get
            Return Me.toStringHelperField
        End Get
    End Property
    #End Region
End Class
#End Region
