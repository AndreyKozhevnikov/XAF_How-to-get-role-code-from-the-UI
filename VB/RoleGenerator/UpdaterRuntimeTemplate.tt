<#@ template language="VB" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="RoleGeneratorSpace" #>
<#@ parameter type="System.Collections.Generic.HashSet( Of System.String)" name="NameSpacesCodeLines" #>
<#@ parameter type="System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List( Of System.String))" name="CodeLines" #>
<#@ parameter type="System.String" name="RoleTypeName" #>
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Threading.Tasks
Imports DevExpress.Data.Filtering
Imports DevExpress.ExpressApp
Imports DevExpress.ExpressApp.Updating
Imports DevExpress.Persistent.Base
<#
For Each [nameSpace] As String In NameSpacesCodeLines#>
Imports <#= nameSpace #>
<# Next #>

Namespace YourNameSpace
	Public Class RoleUpdater
		Inherits ModuleUpdater

		Public Sub New(ByVal objectSpace As IObjectSpace, ByVal currentDBVersion As Version)
            MyBase.New(objectSpace, currentDBVersion)
        End Sub
		Public Overrides Sub UpdateDatabaseAfterUpdateSchema()
			MyBase.UpdateDatabaseAfterUpdateSchema()
<#
For Each method In CodeLines#>
			Create<#= method.Key #>Role()
<# Next #>
			ObjectSpace.CommitChanges()
		End Sub
<#
For Each method In CodeLines#>
		Private Sub Create<#= method.Key #>Role()
			Dim role As <#= RoleTypeName #> = ObjectSpace.FindObject(Of <#= RoleTypeName #>)(new BinaryOperator("Name", "<#= method.Key #>"))
			If role Is Nothing Then
				role = ObjectSpace.CreateObject(Of <#= RoleTypeName #>)()
<#
	For Each codeLine As String In method.Value#>
				<#= codeLine #>
<# Next #>
			End If
		End Sub
<# Next #>
	End Class
End Namespace
